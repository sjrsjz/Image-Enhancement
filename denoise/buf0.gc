#version 430 core
layout (local_size_x=####,local_size_y=####) in;//#### means default pixel(or workspace) size
layout (rgba32f,binding=0) uniform image2D input_;
layout (rgba32f,binding=1) uniform image2D output_;
layout (rgba32f,binding=2) uniform image2D data_;
layout (binding=0) uniform sampler2D tex_0;
layout (binding=1) uniform sampler2D tex_1;

uniform float iTime,scale;
uniform int iFrame,iOffset,iW,iH;
uniform vec4 Position2D;

ivec2 lp;
void F(float x,float y);
vec4 Load(ivec2 pos){
    return imageLoad(input_,pos);
}
void Store(ivec2 pos,vec4 data0){
    imageStore(output_,pos,data0);
}
vec4 Load(){
    return imageLoad(input_,lp);
}
void Store(vec4 data0){
    imageStore(output_,lp,data0);
}
void main(){
    lp=ivec2(gl_GlobalInvocationID.xy);
    Store(lp,Load(lp));
    F(2.0*(lp.x/float(iW)-0.5),2.0*((lp.y+iOffset*iH)/float(iW)-0.5));
}

#include "common.nml"
float rand_i=0.;
float rand(vec2 p)
{
    rand_i += 0.4;
    p=rot(p,rand_i);
    p += rand_i+float(iFrame);
    vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 = fract(tan(dot(p3,p3)*20*atan(p3))) ;
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}
vec4 sampleF(vec2 p,float r,out vec4 D0){
    int j=0;
    vec4 tmp=vec4(0);
    const float S=128;
    vec4 D=vec4(0);
    float w=0;
    for(int j=0;j<64;j++){
    for(int i=0;i<S;i++){
        float a=2*3.1415926535*i/S;
        float e=rand(vec2(i,j)+p*50);
        vec2 offset=vec2(cos(a),sin(a))*(r>0.005?(-log(e)*r):0);
        vec4 tc=texelFetch(tex_1,ivec2(clamp((p+offset),0,1)*(textureSize(tex_1,0))),0);
        D+=tc*tc;
        tmp+=tc;
        w+=1;
    }}
    tmp/=w;
    D/=w;
    D-=tmp*tmp;
    D0=D;
    return tmp;
}
const int denoise=40;
void F(float x,float y){
    if(abs(y)>1) return;
    vec2 p=vec2(x,y)*0.5+0.5;
    if(iFrame==denoise){Store(vec4(imageLoad(data_,lp).xyz,1));return;}
    if(false&&iFrame==denoise+1){
        Store(abs(vec4(Load().xyz-texelFetch(tex_0,ivec2(p*textureSize(tex_0,0)),0).xyz,1))*10);return;
    }
    if(iFrame>denoise) return;
    if(iFrame<=0){
        Store(texelFetch(tex_0,ivec2(p*textureSize(tex_0,0)),0));
        imageStore(data_,lp,vec4(0));
        return;
    }
    vec4 D;
    vec3 tcolor=sampleF(p,1.0/(1.0+iFrame*iFrame*0.25),D).xyz;
    vec3 tcolor2=sampleF(p,0.9/(1.0+iFrame*iFrame*0.25),D).xyz;// <1.0, enhance, >1.0, denoise

    vec3 tc=tcolor;
    float c=pow(max(iFrame-0,0),1.75);
    tc=mix(tc,tcolor2,c/(c+750.0*pow(abs(D.xyz),vec3(0.25))));

    imageStore(data_,lp,imageLoad(data_,lp)+vec4(tc,1));
    Store(Load()-vec4(tcolor,0));
}
